{"version":3,"sources":["components/GeoLocation.jsx","App.js","serviceWorker.js","index.js"],"names":["GeoLocation","useGeolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","coords","isGeolocationAvailable","isGeolocationEnabled","latitude","longitude","useStyles","makeStyles","theme","root","height","textAlign","imgBox","maxWidth","maxHeight","margin","img","input","display","App","classes","useState","source","setSource","className","Grid","container","item","xs","Box","justifyContent","border","src","alt","accept","id","type","capture","onChange","e","target","files","length","file","newUrl","URL","createObjectURL","handleCapture","htmlFor","IconButton","color","aria-label","component","fontSize","Button","variant","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9e23689c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useGeolocated } from \"react-geolocated\";\r\n\r\nconst GeoLocation = () => {\r\n    const { coords, isGeolocationAvailable, isGeolocationEnabled } =\r\n        useGeolocated({\r\n            positionOptions: {\r\n                enableHighAccuracy: false,\r\n            },\r\n            userDecisionTimeout: 5000,\r\n        });\r\n\r\n    return !isGeolocationAvailable ? (\r\n        <div>Your browser does not support Geolocation</div>\r\n    ) : !isGeolocationEnabled ? (\r\n        <div>Geolocation is not enabled</div>\r\n    ) : coords ? (\r\n        <table>\r\n            <tbody>\r\n                <tr>\r\n                    <td>latitude</td>\r\n                    <td>{coords.latitude}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>longitude</td>\r\n                    <td>{coords.longitude}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    ) : (\r\n        <div>Getting the location data&hellip; </div>\r\n    );\r\n};\r\n\r\nexport default GeoLocation;","import React, { useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport { IconButton, Button} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PhotoCameraRoundedIcon from \"@material-ui/icons/PhotoCameraRounded\";\r\nimport GeoLocation from \"./components/GeoLocation.jsx\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100%\",\r\n    textAlign: 'center',\r\n  },\r\n  imgBox: {\r\n    maxWidth: \"80%\",\r\n    maxHeight: \"80%\",\r\n    margin: \"10px\"\r\n  },\r\n  img: {\r\n    height: \"inherit\",\r\n    maxWidth: \"inherit\",\r\n  },\r\n  input: {\r\n    display: \"none\"\r\n  }\r\n}));\r\n\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n\r\n  const [source, setSource] = useState(\"\");\r\n\r\n  const handleCapture = (target) => {\r\n    if (target.files) {\r\n      if (target.files.length !== 0) {\r\n        const file = target.files[0];\r\n        const newUrl = URL.createObjectURL(file);\r\n        setSource(newUrl);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          <h5>Capture your image</h5>\r\n          {source &&\r\n            <Box display=\"flex\" justifyContent=\"center\" border={1} className={classes.imgBox}>\r\n              <img src={source} alt={\"snap\"} className={classes.img}></img>\r\n            </Box>}\r\n          <input\r\n            accept=\"image/*\"\r\n            className={classes.input}\r\n            id=\"icon-button-file\"\r\n            type=\"file\"\r\n            capture=\"environment\"\r\n            onChange={(e) => handleCapture(e.target)}\r\n          />\r\n          <label htmlFor=\"icon-button-file\">\r\n            <IconButton\r\n              color=\"primary\"\r\n              aria-label=\"upload picture\"\r\n              component=\"span\"\r\n            >\r\n              <PhotoCameraRoundedIcon fontSize=\"large\" color=\"primary\" />\r\n            </IconButton>\r\n          </label>\r\n          <Button variant=\"contained\" href=\"#\">\r\n            View Map\r\n          </Button>\r\n          <GeoLocation />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}